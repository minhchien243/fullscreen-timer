{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["pad","n","concat","App","_Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","toggleFullScreen","fullscreen","state","document","exitFullscreen","documentElement","requestFullscreen","setState","resetTimer","t","paused","switchMode","mode","pauseTimer","editing","hintText","getElementById","style","display","toggleEditing","handleKeyDown","event","key","handleCursorMove","toLowerCase","replace","adjusting","showCursor","timer","_inherits","_createClass","value","_this2","setInterval","tick","window","addEventListener","clearInterval","removeEventListener","_this$state","prevState","direction","_objectSpread","_this3","_this$state2","second","parseInt","minute","React","createElement","className","clsx","show-cursor","onDoubleClick","id","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50cf6981.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport clsx from 'clsx';\n// import logo from './logo.svg';\nimport './App.css';\n\nconst pad = (n) => (n < 10)? `0${n}` : n;\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            t: 0,\n            paused: true,\n            mode: 'stopwatch',\n            fullscreen: false,\n            adjusting: false,\n            editing: null, // minute, second, null\n            showCursor: false,\n        }\n        this.timer = null;\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(() => {\n            this.tick();\n        }, 500);\n        window.addEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentWillMount() {\n        clearInterval(this.timer);\n        window.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    tick() {\n        const { mode, paused, showCursor, editing } = this.state;\n        if (editing) {\n            this.setState({ showCursor: !showCursor });\n        }\n        if (paused) return;\n        this.setState((prevState) => {\n            const t = prevState.t + (mode === 'countdown' ? -1 : 1) * 0.5;\n            if (t <= 0) {\n                return {\n                    t: 0,\n                    paused: true,\n                }\n            } else {\n                return {\n                    t,\n                }\n            }\n        });\n    }\n\n    toggleFullScreen = () => {\n        const { fullscreen } = this.state;\n        if (!fullscreen) {\n            document.documentElement.requestFullscreen();\n        } else {\n            if (document.exitFullscreen) {\n                document.exitFullscreen();\n            }\n        }\n        this.setState({ fullscreen: !fullscreen });\n    }\n\n    resetTimer = () => {\n        this.setState({\n            t: 0,\n            paused: true\n        });\n    }\n\n    switchMode = (mode) => {\n        this.setState({\n            mode: mode || (this.state.mode === 'stopwatch' ? 'countdown' : 'stopwatch'),\n        })\n    }\n\n    pauseTimer = () => {\n        this.setState({\n            paused: !this.state.paused,\n            editing: false,\n        })\n        const hintText = document.getElementById(\"hint-text\")\n        if (hintText.style.display === \"none\") {\n            hintText.style.display = \"\"\n        } else {\n            hintText.style.display = \"none\"\n        }\n    }\n\n    toggleEditing = () => {\n        const { editing } = this.state;\n        this.setState({\n            editing: editing ? null : 'second',\n        });\n    }\n\n    handleCursorMove(direction) {\n        const state = { ...this.state };\n        state.paused = true;\n        switch (direction) {\n            case 'up':\n            case 'down':\n                if (!state.editing) {\n                    state.editing = 'second';\n                }\n                state.t += (direction === 'up' ? 1 : -1) * (state.editing === 'second' ? 1 : 60);\n                if (state.t < 0) {\n                    state.t = 0;\n                }\n                break;\n            case 'left':\n                state.editing = 'minute';\n                break;\n            case 'right':\n                state.editing = 'second';\n                break;\n            default:\n                break;\n        }\n        this.setState(state);\n    }\n\n    handleKeyDown = (event) => {\n        switch (event.key) {\n            case 'F':\n            case 'f':\n                this.toggleFullScreen();\n                break;\n            case 'R':\n            case 'r':\n                this.resetTimer();\n                break;\n            case 'S':\n            case 's':\n                this.switchMode();\n                break;\n            case 'ArrowUp':\n            case 'ArrowDown':\n            case 'ArrowLeft':\n            case 'ArrowRight':\n                this.handleCursorMove(event.key.toLowerCase().replace('arrow', ''))\n                break;\n            case 'Enter':\n                this.toggleEditing();\n                break;\n            case ' ':\n                this.pauseTimer();\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n        const { t, paused, editing, mode, showCursor, fullscreen } = this.state;\n        const second = parseInt(t % 60);\n        const minute = parseInt((t - second) / 60);\n        return (\n            <div className=\"App\">\n                <div\n                    className={clsx('clock', { 'show-cursor': showCursor })}\n                    onDoubleClick={() => this.toggleFullScreen()}\n                >\n                    <span className={clsx('time minute', { editing: editing === 'minute' })}>{pad(minute)}</span>\n                    :\n                    <span className={clsx('time second', { editing: editing === 'second' })}>{pad(second)}</span>\n                </div>\n                <ul className=\"tips\" id=\"hint-text\">\n                    <li>\n                        <button onClick={this.toggleFullScreen}>F</button>\n                        -\n                        <span className=\"tip\">{fullscreen ? 'exit': 'enter'} fullscreen</span>\n                    </li>\n                    <li>\n                        <button onClick={() => this.handleCursorMove('left')}>←</button>\n                        <button onClick={() => this.handleCursorMove('right')}>→</button>\n                        <button onClick={() => this.handleCursorMove('up')}>↑</button>\n                        <button onClick={() => this.handleCursorMove('down')}>↓</button>\n                        -\n                        <span className=\"tip\">edit timer</span>\n                    </li>\n                    <li>\n                        <button onClick={this.resetTimer}>R</button>\n                        -\n                        <span className=\"tip\">reset timer</span>\n                    </li>\n                    <li>\n                        <button onClick={this.switchMode}>S</button>\n                        -\n                        {mode === 'countdown' ?\n                            <span className=\"tip\"><span>countdown ✓</span> or <button onClick={() => this.switchMode('stopwatch')}>stopwatch</button></span>\n                            :\n                            <span className=\"tip\"><button onClick={() => this.switchMode('countdown')}>countdown</button> or <span>stopwatch ✓</span></span>\n                        }\n                    </li>\n                    <li>\n                        <button onClick={this.pauseTimer}>Space</button>\n                        -\n                        <span className=\"tip\">{paused ? 'start' : 'pause'} timer</span>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}